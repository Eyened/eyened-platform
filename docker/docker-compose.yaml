version: "3.1"

services:

  database:
    image: mysql:8.0.27
    # user: "${USERID:-1000}:${GROUPID:-1000}"
    environment:
      MYSQL_ROOT_PASSWORD: ${DATABASE_ROOT_PASSWORD}
    volumes:
      - ${DATABASE_PATH}:/var/lib/mysql 
    ports:
      - "${DATABASE_PORT}:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-p${DATABASE_ROOT_PASSWORD}"]
      interval: 2s
      timeout: 5s
      retries: 10

  api-server:
    user: "${USERID:-1000}:${GROUPID:-1000}"
    build:
      context: ../
      dockerfile: ./docker/Dockerfile.server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 2s
      timeout: 5s
      retries: 10
    depends_on:
      database:
        condition: service_healthy
    environment:
      - IMAGES_BASEPATH=/images
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DB_HOST=database
      - DB_PASSWORD=${DATABASE_ROOT_PASSWORD}
      - DB_USER=root
      - DB_PORT=3306
      - DB_NAME=eyened_database
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    restart: always
    volumes:
      - ${IMAGES_BASEPATH}:/images
      - ${STORAGE_BASEPATH}:/storage

  redis:
    user: "${USERID:-1000}:${GROUPID:-1000}"
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 2s
      timeout: 5s
      retries: 10

  worker:
    user: "${USERID:-1000}:${GROUPID:-1000}"
    build:
      context: ../
      dockerfile: ./docker/Dockerfile.worker
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DB_HOST=database
      - DB_PASSWORD=${DATABASE_ROOT_PASSWORD}
      - DB_USER=root
      - DB_PORT=3306
      - DB_NAME=eyened_database
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - IMAGES_BASEPATH=/images
    depends_on:
      redis:
        condition: service_healthy
      database:
        condition: service_healthy
    volumes:
      - ${IMAGES_BASEPATH}:/images
      - ${STORAGE_BASEPATH}:/storage
    restart: always

  fileserver:
    build:
      context: .
      dockerfile: Dockerfile.fileserver
    depends_on:
      api-server:
        condition: service_healthy
    volumes:
      - ${IMAGES_BASEPATH}:/images
      - ${STORAGE_BASEPATH}/thumbnails:/thumbnails
    ports:
      - ${PORT}:80

  adminer:
    image: adminer:latest
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      database:
        condition: service_healthy
    environment:
      - ADMINER_DEFAULT_SERVER=database

